(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var r=e.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var s=r.getElementsByTagName("script");s.length&&(t=s[s.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),document.querySelector(".usercard__name-user").textContent,document.querySelector(".usercard__about-me").textContent;const t=document.querySelector(".popup__input_profile_name-user"),r=document.querySelector(".popup__input_profile_about-me"),s=document.querySelector(".usercard__edit"),n=document.querySelector("#edit-profile"),i=document.querySelector("#btn-edit"),o=document.querySelector(".usercard__add-post"),a=document.querySelector("#popup-new-place"),c=document.querySelector("#btn-add-card"),l=a.querySelector(".popup__form"),u=n.querySelector(".popup__form"),d=document.querySelector(".popup__name-img"),_=document.querySelector(".usercsrg__avatar-conteiner");document.querySelector(".popup__btn-avatar"),document.querySelector(".usercsrd__avatar"),document.querySelector("#avatar"),document.querySelector(".popup__input_avatar"),document.querySelector("#form-avatar"),document.querySelector(".popup__btn-avatar");class h{constructor({data:e,handleCardClick:t,handleDeleteClick:r,handleLikeClick:s,userId:n},i){this._name=e.name,this._link=e.link,this._like=e.like,this._cardId=e.cardId,this._ownerId=e.owner._id,this._userId=n,this._cardTemplate=document.querySelector(i),this._handleCardClick=t.bind(this),this._handleDeleteClick=r.bind(this),this._handleLikeClick=s.bind(this),this._onClickLike=this._onClickLike.bind(this),this._toggleLike=this._toggleLike.bind(this)}createCard(){return this._element=this._cloneCard(),this._setEventListeners(),this.cardImg=this._element.querySelector(".usercard__img-cards"),this._element.querySelector(".usercard__name-cards").textContent=this._name,this.cardImg.alt=this._name,this.cardImg.src=this._link,this._like.forEach((e=>{e._id===data&&this._element.querySelector(".usercard__like-button").classList.add("usercard__like-button_active")})),this._userId.then((e=>{e!==this._ownerId&&this._element.querySelector(".usercard__btn-delete").remove})),this._element}_cloneCard(){return this._cardTemplate.content.querySelector(".usercard__card").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".usercard__btn-delete").addEventListener("click",(()=>this._onClickDelete())),this._element.querySelector(".usercard__like-button").addEventListener("click",this._onClickLike),this._element.querySelector(".usercard__img-cards").addEventListener("click",this._handleCardClick.bind(this))}_onClickDelete(){this._element.remove(),this._element=null}_toggleLike(){this._handleLikeClick(evt.target,this._cardId)}setLike(e){this._element.querySelector(".usercard__like-counter").textContent=e.lenght,this._element.querySelector(".usercard__like-button").classList.toggle("usercard__like-button_active")}}class p{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonElement=this._formElement.querySelector(e.submitButtonSelector),this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector))}_showInputError(e,t){const r=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideInputError=e=>{const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)};_validateField(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._submitButtonElement.classList.add(this._inactiveButtonClass),this._submitButtonElement.setAttribute("disabled",!0)):(this._submitButtonElement.removeAttribute("disabled"),this._submitButtonElement.classList.remove(this._inactiveButtonClass))}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._validateField(e),this._toggleButtonState()}))}))}resetSppanError(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class m{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._overlayClick=this._overlayClick.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("click",this._overlayClick)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._overlayClick)}_handleEscClose(e){"Escape"===e.key&&this._popup.classList.contains("popup_opened")&&this.close()}_overlayClick(e){e.target.classList.contains("popup")&&this.close()}setEventListeners(){this._popup.querySelector(".popup__close").addEventListener("click",(()=>this.close()))}}class k extends m{constructor(e,t){super(e),this._handleFormSubmit=t,this._inputList=document.querySelectorAll(".popup__input")}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>this._formValues[e.name]=e.value)),this._formValues}setEventListeners(){super.setEventListeners(),this._form=this._popup.querySelector(".popup__form"),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._form.reset()}}const v={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__btn",inactiveButtonClass:"popup__btn_invalid",inputErrorClass:"popup__input_type_error",errorClass:"error_active"},f=[{name:"Аланский Успенский мужской монастырь",link:e.p+"ea3ea5698ecf08ff4a40.jpg"},{name:"Тоторс",link:e.p+"8ba7a4bb1fba7fe0c56a.jpg"},{name:"Даргавс",link:e.p+"c0d040fe474ea32ec256.jpg"},{name:"Цейское ущелье",link:e.p+"6643d9df4f038302ba2f.jpg"},{name:"Караугом",link:e.p+"5de75ee27b6c1127a983.jpg"},{name:"Владикавказ",link:e.p+"d64b7faed18d800f471a.jpg"}],C=new class{constructor({nameSelector:e,aboutSelector:t}){this._name=document.querySelector(e),this._about=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,about:this._about.textContent}}setUserInfo({name:e,about:t}){this._name.textContent=e,this._about.textContent=t}}({nameSelector:".usercard__name-user",aboutSelector:".usercard__about-me"}),b=new class extends m{constructor(e){super(e),this._popupImg=this._popup.querySelector(".popup__img"),this._popupNameImg=this._popup.querySelector(".popup__name-img")}open(e){super.open(),this._popupImg.src=e.src,this._popupImg.alt=e.alt,this._popupNameImg.textContent=e.name}}("#popup-new-place-img"),y=new class extends m{constructor(e,t){super(e),this._handleSubmit=t}open(e,t,r){super.open(),this._cardId=t,this._card=e,this.deleteCard=r}cardId(){return this._cardId}setEventListeners(){super.setEventListeners(),this._form=this._popup.querySelector(".popup__form"),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._card,this._cardId,this.deleteCard)}))}}("#delete",(function(e,t){t.textContent="Удаление...",S.deleteCard(e).then((()=>{deleteCard(),y.close()})).catch((e=>(console.log(e),[]))).finally((()=>{i.textContent="Да"}))})),S=new class{constructor(e){this._url=e.url,this._token=e.token}getUserInfo(){return fetch(this._url+"/user/me",{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}getInitCards(){return fetch(`${this._url}/cards`,{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}editUserData(e){return fetch(`${this._url}/user/me`,{method:"PATCH",headers:{authorization:this._token,"Content-type":"application/json"},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}postNewCard(e){return fetch(`${this._url}/cards`,{method:"POST",headers:{authorization:this._token,"Content-type":"application.json"},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:{authorization:this._token,"Content-type":"application.json"}}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}addLike(e){return fetch(`${this._url}/cards/likes/${e}`,{method:"Put",headers:{authorization:this._token,"Content-type":"application.lson"}.then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))})}removeLike(e){return fetch(`${this._url}/cards/like/${e}`,{method:"DELETE",headers:{authorization:this._token,"Content-type":"application.json"}.then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))})}editAvatar(e){return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._token,"Content-type":"application.json"},body:JSON.stringify(e)}).then((e=>e.ok?e.json():Promise.reject(`Хьюстон у нас проблемы: ${e.status}`)))}}({url:"https://mesto.nomoreparties.co/v1/cohort-41",token:"b5bdcdec-63ee-45ff-9d96-2d1014a8d329"}),g=new k("#popup-new-place",(function({place:e,link:t}){c.textContent="Сохранение...",S.postNewCard({name:e,link:t,alt:e}).then((e=>{I.addItems(e),g.close()})).catch((e=>(console.log(e),[]))).finally((()=>{c.textContent="Создать"}))})),E=new k("#edit-profile",(function({name:e,about:t}){i.textContent="Сохранение...",S.editUserData({name:e,about:t}).then((e=>{C.setUserInfo(e),E.close()})).catch((e=>(console.log(e),[]))).finally((()=>{i.textContent="Сохранить"}))})),L=new k("#avatar",(function({avatar:e}){btnAvatarSave.textContent="Сохранение...",S.editAvatar({avatar:e}).then((e=>{C.setUserInfo(e),L.close()})).catch((e=>(console.log(e),[]))).finally((()=>{btnAvatarSave.textContent="Сохранить"}))})),I=new class{constructor({items:e,renderer:t},r){this._items=e,this._renderer=t,this._container=document.querySelector(r)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}({items:f,renderer:e=>I.addItems(function(e){const t=new h({data:e,handleCardClick:()=>function(e){const t=e.target.getAttribute("src"),r=e.target.getAttribute("alt");b.open({src:t,alt:r}),d.textContent=r}(e),handleDeleteClick:(e,t,r)=>{y.open(e,t,r)},handleLikeClick:(e,r)=>{e.classList.contains("usercard__like-button_active")?S.removeLike(r).then((e=>{t.setLike(e.like)})).catch((e=>(console.log(e),[]))):S.addLike(r).then((e=>{t.setLike(e.like)})).catch((e=>(console.log(e),[])))}},".usercard__blank-card").createCard()}(e))},".usercard__content"),q=new p(v,l);q.enableValidation();const w=new p(v,u);w.enableValidation(),S.getUserInfo().then((e=>{C.setUserInfo(e)})),s.addEventListener("click",(function(){E.open(),w.resetSppanError(),t.value=C.getUserInfo().name,r.value=C.getUserInfo().about})),o.addEventListener("click",(function(){g.open(),q.resetSppanError()})),_.addEventListener("click",(function(){L.open()})),I.renderItems(),g.setEventListeners(),E.setEventListeners(),b.setEventListeners(),L.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,